image: ubuntu:16.04

stages:
  - test

variables:
  POSTGRES_DB: dbname # set database
  POSTGRES_USER: username # set username
  POSTGRES_PASSWORD: ""  

before_script:
  - apt-get update
  - apt-get install -y jq curl wget wc
  - wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
  - echo "deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main $PG_SERVER_VERSION" > /etc/apt/sources.list.d/pgdg.list
  - apt-get update
  - apt-get -y upgrade
  - apt-get -y install golang-1.9-go
  - echo "export PATH=\$PATH:/usr/lib/go-1.9/bin" >> ~/.profile
  - source ~/.profile
  - apt-get -y install postgresql-client-11
  - psql --version

.test-check:
  script:
    - psql -h postgres -d dbname -U username -c "SELECT version();"
    - psql -h postgres -d dbname -U username -f .ci/h002.sql
    - ./checkup -h postgres --username username --project test --dbname dbname -e 1
    - data_dir=$(cat ./artifacts/test/nodes.json | jq -r '.last_check | .dir') && result=$(cat ./artifacts/test/json_reports/$data_dir/H002_non_indexed_fks.json | jq '.results .postgres .data') && ([[ "$result" == "[]" ]] || [[ "$result" == "null" ]]) && exit 101
    - psql -h postgres -d dbname -U username -f .ci/h002_step2.sql
    - rm -Rf ./artifacts/
    - ./checkup -h postgres --username username --project test --dbname dbname -e 1
    - data_dir=$(cat ./artifacts/test/nodes.json | jq -r '.last_check | .dir') && result=$(cat ./artifacts/test/json_reports/$data_dir/H002_non_indexed_fks.json | jq '.results .postgres .data') && echo "$result" && cat ./artifacts/test/json_reports/$data_dir/H002_non_indexed_fks.json && (! [[ "$result" == "[]" ]]) && exit 102
    - echo "Passed"
  
test-acceptance:
  stage: test
  before_script:
    - apt-get update
    - apt-get install -y jq curl wget
    - wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
    - echo "deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main $PG_SERVER_VERSION" > /etc/apt/sources.list.d/pgdg.list
    - apt-get update
    - apt-get -y upgrade
    - apt-get install -y sudo
    - apt-get -y install golang-1.9-go
    - echo "export PATH=\$PATH:/usr/lib/go-1.9/bin" >> ~/.profile
    - source ~/.profile
    - apt-get -y install postgresql-11 postgresql-contrib-11 postgresql-client-11
    - psql --version
    - apt-get install -y postgresql-server-dev-11 && apt-get install -y postgresql-11-pg-stat-kcache
    - echo "local   all all trust" > /etc/postgresql/11/main/pg_hba.conf
    - echo "host all  all    0.0.0.0/0  md5" >> /etc/postgresql/11/main/pg_hba.conf
    - echo "host all  all    ::1/128  trust" >> /etc/postgresql/11/main/pg_hba.conf
    - echo "listen_addresses='*'" >> /etc/postgresql/11/main/postgresql.conf
    - echo "log_filename='postgresql-11-main.log'" >> /etc/postgresql/11/main/postgresql.conf
    - echo "shared_preload_libraries = 'pg_stat_statements,auto_explain,pg_stat_kcache'" >> /etc/postgresql/11/main/postgresql.conf
    - echo "logging_collector = on" >> /etc/postgresql/11/main/postgresql.conf
    - /etc/init.d/postgresql start 
    - psql -U postgres -c 'create database dbname;'
    - psql -U postgres dbname -b -c 'create extension if not exists pg_stat_statements;'
    - psql -U postgres dbname -b -c 'create extension if not exists pg_stat_kcache;'
    - psql -U postgres dbname -c "create role username superuser login;"
    - mkdir -p ~/.ssh && echo "${PRIVATE_KEY}" > ~/.ssh/id_rsa && echo "${PUBLIC_KEY}" > ~/.ssh/authorized_keys && chmod 644 ~/.ssh/authorized_keys && chmod 600 ~/.ssh/id_rsa
    - apt-get -y install openssh-server
    - service ssh restart
    
  script:
    - bash -version
    - psql -h localhost -d dbname -U username -c "SELECT version();"
    - psql -h localhost -d dbname -U username -f .ci/test_db_dump.sql
    - psql -h localhost -d dbname -U username -c "show log_directory;"
    - psql -h localhost -d dbname -U username -c "show data_directory;"
    - ./checkup -h localhost --username username --project test --dbname dbname -e 1 > std.log 2> err.log
    - cat err.log
    - ./checkup -h localhost --username username --project test --dbname dbname -e 1 > std.log 2> err.log
    - cat err.log
    - stat --format="%s" err.log
    - grep -v "Failed to create bus connection" err.log > err1.log || true
    - cat err1.log
    - stat --format="%s" err1.log
    - exit $(stat --format="%s" err1.log)
    #- sh -c ">&2 cat err.log"
    #- grep -v "need two checks to compare results. Please run whole check for this epoch again" err.log > err1.log
    #- grep -v "^^ this is not a real error. Just run check again" err1.log > err.log

  artifacts:
    paths:
      - ./artifacts/test
      - ./std.log
      - ./err.log
    expire_in: 1 week

.test-pghrep:
  stage: test
  script:
    - cd pghrep && make test

.test-check-9.6:
  extends: ".test-check"
  stage: "test"
  services:
    - postgres:9.6

.test-check-10:
  extends: ".test-check"
  stage: "test"
  services:
    - postgres:10

.test-check-11:
  extends: ".test-check"
  stage: "test"
  services:
    - postgres:11

.test-check-cli:
  services:
    - postgres:11
  stage: "test"
  script: |
    errcount=0
    printTail="                                                                      "
    for f in tests/cli_*.sh; do
      printf "$f${printTail:0:-${#f}}"
      bash "$f" -H
      status=$?
      if [ "$status" -ne 0 ]; then
        errcount="$(($errcount+1))"
      fi
    done
    if [ "$errcount" -ne 0 ]; then
      >&2 echo "Oh no! $errcount tests failed"
      exit 1
    fi
